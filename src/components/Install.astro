---
const { 
    gamePathTitle,
    version,
    platforms,
    gameData,
} = Astro.props;

const installButtonClasses = `btn install install-${gamePathTitle}`;
---
<script is:inline>
    if(globalThis.presto?.state != 'loaded') {
        console.log("Settings not loaded yet");
        addEventListener('presto:settings-loaded', () => {
            ready();
        });
    } else {
        ready();
    }

    function ready() {
        const installButton = document.querySelector("button.install");

        // get current settings
        let currentSettings = globalThis.presto.currentSettings;
        const installPath = currentSettings?.installPath

        const gamePathTitle = installButton.dataset.gamePathTitle;
        console.debug("gamePathTitle", gamePathTitle);
        const gameVersion = installButton.dataset.gameVersion;
        console.debug("gameVersion", gameVersion);

        if(globalThis.presto.currentSettings.installed) {
            const installedGames = Object.keys(globalThis.presto.currentSettings.installed);
            if(installedGames.includes(gamePathTitle)) {
                const gameInstallButton = document.querySelector(`.install-${gamePathTitle}`);
                if(gameInstallButton) {
                    gameInstallButton.classList.add("hidden");
                    return;
                }
            }
        }

        // Detect OS
        const currentPlatform = globalThis.presto.currentPlatform;

        // get home dir path
        const homeDirPath = globalThis.presto.homeDirPath;
        
        // get platforms and game data
        const platforms = JSON.parse(installButton.dataset.platforms);
        const gameData = JSON.parse(installButton.dataset.gameData);

        const downloadFile = platforms[currentPlatform].downloadFile;
        console.debug("downloadFile", downloadFile);
        const romInstallPath = platforms[currentPlatform].romInstallPath;
        console.debug("romInstallPath", romInstallPath);
        const romInstallDir = platforms[currentPlatform].romInstallDir;
        console.debug("romInstallDir", romInstallDir);
        
        const dataDownloadPath = gameData.downloadPath;
        console.debug("dataDownloadPath", dataDownloadPath);
        const dataDownloadFile = gameData.downloadFile;
        console.debug("dataDownloadFile", dataDownloadFile);
        
        if(installButton != null) {
            installButton.addEventListener("click", async () => {
                if (currentSettings && installPath) {
                    globalThis.presto.functions.showDownloadBar(true);
                    const zipPath = `${installPath}/${gamePathTitle}.zip`;
                    const finalPath = `${installPath}/${gamePathTitle}`;
                    const tempPath = `${installPath}/temp`;
                    
                    await globalThis.presto.functions.downloadFile(downloadFile, zipPath)
                    .then(async () => {
                        // Extract based on platform
                        let result;
                        
                        result = await globalThis.presto.functions.genericInvoke('unzip_file', { 
                            zipPath: zipPath,
                            tempPath: tempPath,
                            finalPath: finalPath
                        });
                        globalThis.presto.functions.updateProgress('Installing', 100);

                        console.debug("zipPath", zipPath);
                        console.debug("finalPath", finalPath);
                        console.debug("result", result);
                    })
                    .catch((error) => {
                        console.error("Failed to extract file:", error);
                        throw error; // Re-throw to trigger the finally block
                    })
                    .then(async () => {
                        console.debug("download path", `${dataDownloadPath}${dataDownloadFile}`);
                        console.debug("temp path", `${tempPath}/${dataDownloadFile}`);
                        // If we're on windows or linux, we can download the data file to the final path
                        // If we're on macos, we need to move the file to the temp path and move it later
                        let destPath = `${finalPath}/${dataDownloadFile}`;
                        if(currentPlatform == 'macos') {
                            destPath = `${tempPath}/${dataDownloadFile}`;
                        }
                        await globalThis.presto.functions.downloadFile(`${dataDownloadPath}${dataDownloadFile}`,destPath);
                    })
                    .catch((error) => {
                        console.error("Failed to download data file:", error);
                        throw error;
                    })
                    .then(async () => {
                        if(currentPlatform === 'macos') {
                            console.debug("temp move file step", `${tempPath}/${dataDownloadFile}`, tempPath);
                            console.debug("dest path",`${homeDirPath}${romInstallPath}/${romInstallDir}/${dataDownloadFile}`)
                            let result;
                            
                            result = await globalThis.presto.functions.genericInvoke('move_file', { 
                                source: `${tempPath}/${dataDownloadFile}`,
                                destination: `${homeDirPath}${romInstallPath}/${romInstallDir}/${dataDownloadFile}`,
                            });
                            console.debug("result", result);
                        }
                    })
                    .catch((error) => {
                        console.error("Failed to move file:", error);
                        throw error;
                    })
                    .then(async () => {
                        // If we got here, all previous operations were successful
                        globalThis.presto.functions.setInstalled(gamePathTitle, gameVersion);
                    })
                    .catch((error) => {
                        console.error("Installation failed:", error);
                        throw error;
                    })
                    .finally(async () => {
                        try {
                            await globalThis.presto.functions.genericInvoke('cleanup_folder', { 
                                folder: `${tempPath}`
                            });
                            await globalThis.presto.functions.genericInvoke('cleanup_file', { 
                                file: `${zipPath}`
                            });
                        } catch (error) {
                            console.error("Cleanup failed:", error);
                        } finally {
                            globalThis.presto.functions.showDownloadBar(false);
                        }
                    });
                }
            });
        }
    }
</script>
<button class={installButtonClasses} 
data-game-path-title={gamePathTitle} 
data-game-version={version}
data-platforms={JSON.stringify(platforms)}
data-game-data={JSON.stringify(gameData)}
>Install</button>