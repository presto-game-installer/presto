---
---
<script>
    //global function loader/setter
    import { load } from '@tauri-apps/plugin-store';
    import { open } from "@tauri-apps/plugin-dialog";
    import { download } from '@tauri-apps/plugin-upload';
    import { type } from '@tauri-apps/plugin-os';
    import { invoke } from '@tauri-apps/api/core';
    import { homeDir } from '@tauri-apps/api/path';

    //setup presto
    globalThis.presto = {
      state: 'loading',
      currentSettings: {
        installed: {}
      },
    };

    //setup settings and store
    globalThis.presto.currentSettings = {};
    globalThis.presto.store = await load('presto-data.json', { autoSave: true });
    await globalThis.presto.store.get('settings').then(
        (settings: { value: string } | null) => {
            if (settings != null) {
                globalThis.presto.currentSettings = settings;
            }
        }
    ).then(async () => {
        globalThis.presto.homeDirPath = await homeDir();
    }).then(async () => {
        globalThis.presto.currentPlatform = type();
    }).finally(() => {
        globalThis.presto.state = 'loaded';
        console.log("Settings loaded");
        const event = new CustomEvent('presto:settings-loaded', {});
        window.dispatchEvent(event);
    }).catch((error) => {
        globalThis.presto.state = 'error';
        console.error("Error loading settings", error);
    });


    //setup functions needed that interact with tauri
    globalThis.presto.functions = {}

    globalThis.presto.functions.setInstalled = (game, version) => {
        if(!globalThis.presto.currentSettings.installed) {
            globalThis.presto.currentSettings.installed = {};
        }
        if(globalThis.presto.currentSettings.installed[game]) {
            return;
        } else {
            globalThis.presto.currentSettings.installed[game] = {};
            globalThis.presto.currentSettings.installed[game].version = version;
            globalThis.presto.store.set('settings', globalThis.presto.currentSettings);
        }
    }

    globalThis.presto.functions.setBaseDirectory = async () => {
        const newInstallPath = await open({
            directory: true,
        });

        if (newInstallPath) {
            globalThis.presto.currentSettings.installPath = newInstallPath;
            await globalThis.presto.store.set('settings', globalThis.presto.currentSettings);
        }
    }

    globalThis.presto.functions.genericInvoke = async (command, args) => {
        return await invoke(command, args);
    }

    globalThis.presto.functions.downloadFile = async (downloadUrl, localPath) => {
      let progressTotal = 0;
      await download(
        downloadUrl,
        localPath,
        ({progress, total}) => {
            progressTotal += progress;
            globalThis.presto.functions.updateProgress(downloadUrl, (progressTotal / total) * 100);
        },)
    }

    // Show/hide download bar
    globalThis.presto.functions.showDownloadBar = (show = true) => {
      const bar = document.getElementById('download-progress');
      if (bar) {
        bar.style.transform = show ? 'translateY(0)' : 'translateY(100%)';
      }
    }

    // Update progress
    globalThis.presto.functions.updateProgress = (filename, progress) => {

      const filenameEl = document.getElementById('download-filename');
      if (filenameEl) {
        filenameEl.textContent = filename;
      }
      
      if(progress) {
        const bar = document.getElementById('download-bar');
        const percentage = document.getElementById('download-percentage');

        if (bar && percentage) {
          bar.style.width = `${progress}%`;
            percentage.textContent = `${Math.round(progress)}%`;
        }
      }
    }
</script>
