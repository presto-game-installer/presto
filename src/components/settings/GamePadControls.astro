---
---
<script src="/js/gamecontroller.min.js" is:inline/>
<script is:inline>
    if(globalThis?.presto?.state != 'loaded') {
        console.debug("Presto:: Settings not loaded yet");
        addEventListener('presto:settings-loaded', () => {
            readyGamePadControls();
        });
    } else {
        readyGamePadControls();
    }

    function readyGamePadControls() {
        const focusableElements = 'button:not([inert]), a[href]:not([inert]), select:not([inert]), textarea:not([inert]), [tabindex]:not([tabindex="-1"])';
    
        // When the page loads, focus the first focusable element
        document.addEventListener('astro:page-load', () => {
            const allFocusable = Array.from(document.querySelectorAll(focusableElements));
            allFocusable[1].focus();
        });

        globalThis.presto.gamepadControls = {
                getCurrentFocusableElement: function() {
                return document.querySelector(':focus');
            },
            getAllFocusableElements: function(parent) {
                if(typeof parent === 'undefined') {
                    parent = document;
                }
                return Array.from(parent.querySelectorAll(focusableElements));
            },
            findCurrentElementIndex: function() {
                const allFocusable = this.getAllFocusableElements();
                const currentElement = this.getCurrentFocusableElement();
                return allFocusable.indexOf(currentElement);
            },
            findNextElement: function() {
                const allFocusable = this.getAllFocusableElements();
                const currentIndex = this.findCurrentElementIndex();
                const nextElement = allFocusable[currentIndex + 1] || allFocusable[0];
                return nextElement;
            },
            findPreviousElement: function() {
                const allFocusable = this.getAllFocusableElements();
                const currentIndex = this.findCurrentElementIndex();
                const previousElement = allFocusable[currentIndex - 1] || allFocusable[0];
                return previousElement;
            },
            focusFirstElementInMenu: function() {
                this.getAllFocusableElements(document.querySelector('.drawer-side'))[0].focus();
            },
            focusFirstElementInMainContent: function() {
                this.getAllFocusableElements(document.querySelector('main'))[0].focus();
            },
            pressCurrentElement: function() {
                document.activeElement.click();
            },
            goBack: function() {
                window.history.back();
            },
            goDown: function() {
                this.findNextElement().focus();
            },
            goUp: function() {
                this.findPreviousElement().focus();
            },
            goToSettings: function() {
                window.location.href = '/settings';
            }
        }
    
        gameControl.on('connect', gamepad => {
            //set initial focus
            const allFocusable = Array.from(document.querySelectorAll(focusableElements));
            allFocusable[1].focus();
            console.debug('Presto:: A new gamepad was connected!');

            // UP
            gamepad
                .after('button12',() => {
                    globalThis.presto.gamepadControls.goUp();
                    console.debug('Presto:: Button 12 still pressed...'); 
                })
                .after('up0',() => {
                    globalThis.presto.gamepadControls.goUp();
                    console.debug('Presto:: up0 still pressed...'); 
                });

            // DOWN
            gamepad
                .after('button13',() => {
                    globalThis.presto.gamepadControls.goDown();
                    console.debug('Presto:: Button 13 still pressed...'); 
                })
                .after('down0',() => {
                    globalThis.presto.gamepadControls.goDown();
                    console.debug('Presto:: down0 still pressed...'); 
                });

            // LEFT
            gamepad
                .after('button14',() => {
                    globalThis.presto.gamepadControls.focusFirstElementInMenu();
                    console.debug('Presto:: Button 14 still pressed...'); 
                })
                .after('left0',() => {
                    globalThis.presto.gamepadControls.focusFirstElementInMenu();
                    console.debug('Presto:: left0 still pressed...'); 
                })
                .after('l1',() => {
                    globalThis.presto.gamepadControls.focusFirstElementInMenu();
                    console.debug('Presto:: l1 still pressed...'); 
                });

            // RIGHT
            gamepad
                .after('button15',() => {
                    globalThis.presto.gamepadControls.focusFirstElementInMainContent();
                    console.debug('Presto:: Button 15 still pressed...'); 
                })
                .after('right0',() => {
                    globalThis.presto.gamepadControls.focusFirstElementInMainContent();
                    console.debug('Presto:: right0 still pressed...'); 
                })
                .after('r1',() => {
                    globalThis.presto.gamepadControls.focusFirstElementInMainContent();
                    console.debug('Presto:: r1 still pressed...'); 
                });

            // A
            gamepad.after('button0',() => {
                globalThis.presto.gamepadControls.pressCurrentElement();
                console.debug('Presto:: Button 0 still pressed...');             
            });

            // B
            gamepad.after('button1',() => {
                globalThis.presto.gamepadControls.goBack();
                console.debug('Presto:: Button 1 still pressed...');             
            });

            // select
            gamepad.after('select',() => {
                globalThis.presto.gamepadControls.goToSettings();
                console.debug('Presto:: Select still pressed...');             
            });
        });
    }
</script>