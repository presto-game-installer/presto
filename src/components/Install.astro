---
const { 
    gamePathTitle,
    version,
    platforms,
    gameData,
} = Astro.props;
---
<script is:inline>
    if(globalThis.presto?.state != 'loaded') {
        console.log("Settings not loaded yet");
        addEventListener('presto:settings-loaded', () => {
            ready();
        });
    } else {
        ready();
    }

    function ready() {
        // get current settings
        let currentSettings = globalThis.presto.currentSettings;
        const installPath = currentSettings?.installPath

        // Detect OS
        const currentPlatform = globalThis.presto.currentPlatform;

        // get home dir path
        const homeDirPath = globalThis.presto.homeDirPath;
        
        // get platforms and game data
        const installButton = document.querySelector("button.install");
        const platforms = JSON.parse(installButton.dataset.platforms);
        const gameData = JSON.parse(installButton.dataset.gameData);

        const downloadFile = platforms[currentPlatform].downloadFile;
        console.debug("downloadFile", downloadFile);
        const romInstallPath = platforms[currentPlatform].romInstallPath;
        console.debug("romInstallPath", romInstallPath);
        const romInstallDir = platforms[currentPlatform].romInstallDir;
        console.debug("romInstallDir", romInstallDir);
        
        const gamePathTitle = installButton.dataset.gamePathTitle;
        console.debug("gamePathTitle", gamePathTitle);
        const gameVersion = installButton.dataset.gameVersion;
        console.debug("gameVersion", gameVersion);
        const dataPath = gameData.downloadPath;
        console.debug("dataPath", dataPath);
        const dataFile = gameData.downloadFile;
        console.debug("dataFile", dataFile);
        
        if(installButton != null) {
            installButton.addEventListener("click", async () => {
                if (currentSettings && installPath) {
                    globalThis.presto.functions.showDownloadBar(true);
                    const zipPath = `${installPath}/${gamePathTitle}.zip`;
                    const extractPath = `${installPath}/${gamePathTitle}`;
                    const tempPath = `${installPath}/temp`;
                    await globalThis.presto.functions.downloadFile(downloadFile, zipPath)
                    .then(async () => {
                        // Extract based on platform
                        let result;
                        
                        result = await globalThis.presto.functions.genericInvoke('unzip_file', { 
                            zipPath: zipPath,
                            extractPath: tempPath,
                            finalPath: extractPath
                        });
                        globalThis.presto.functions.updateProgress('Installing', 100);

                        console.debug("zipPath", zipPath);
                        console.debug("extractPath", extractPath);
                        console.debug("result", result);
                    }).then(async () => {
                        console.debug("download path", `${dataPath}${dataFile}`);
                        console.debug("temp path", `${tempPath}/${dataFile}`);
                        await globalThis.presto.functions.downloadFile(`${dataPath}${dataFile}`,`${tempPath}/${dataFile}`)
                    }).then(async () => {
                        console.debug("temp move file step", `${tempPath}/${dataFile}`, tempPath);
                        console.debug("dest path",`${homeDirPath}${romInstallPath}/${romInstallDir}/${dataFile}`)
                        let result;
                        
                        result = await globalThis.presto.functions.genericInvoke('move_file', { 
                            source: `${tempPath}/${dataFile}`,
                            destination: `${homeDirPath}${romInstallPath}/${romInstallDir}/${dataFile}`,
                        });
                        console.debug("result", result);

                    }).finally(async () => {
                        globalThis.presto.functions.setInstalled(gamePathTitle, gameVersion);
                        await globalThis.presto.functions.genericInvoke('cleanup_folder', { 
                            folder: `${tempPath}`
                        });
                        await globalThis.presto.functions.genericInvoke('cleanup_file', { 
                            file: `${zipPath}`
                        });
                        globalThis.presto.functions.showDownloadBar(false);
                    });
                }
            });
        }
    }
</script>
<button class="btn install" 
data-game-path-title={gamePathTitle} 
data-game-version={version}
data-platforms={JSON.stringify(platforms)}
data-game-data={JSON.stringify(gameData)}
>Install</button>