---
const { 
    gamePathTitle,
    version,
    gamePlatforms,
    gameData,
} = Astro.props;

const buttonClasses = `btn hidden install install-${gamePathTitle}`;
---
<script is:inline>
    if(globalThis.presto?.state != 'loaded') {
        console.log("Settings not loaded yet");
        window.addEventListener('presto:settings-loaded', () => {
            readyInstallButton();
        });
    } else {
        readyInstallButton();
    }

    function readyInstallButton() {
        const button = document.querySelector("button.install");

        // get current settings
        let currentSettings = globalThis.presto.currentSettings;
        const installPath = currentSettings?.installPath

        const gamePathTitle = button.dataset.gamePathTitle;
        console.debug("gamePathTitle", gamePathTitle);
        const gameVersion = button.dataset.gameVersion;
        console.debug("gameVersion", gameVersion);

        if(globalThis.presto.currentSettings.installed) {
            const installedGames = Object.keys(globalThis.presto.currentSettings.installed);
            if(!installedGames.includes(gamePathTitle)) {
                button.classList.remove("hidden");
                button.removeAttribute("inert");
            }
        }

        // Detect OS
        const currentPlatform = globalThis.presto.currentPlatform;

        // get home dir path
        const homeDirPath = globalThis.presto.homeDirPath;
        
        // get platforms and game data
        const gamePlatforms = JSON.parse(button.dataset.gamePlatforms);
        const gameData = JSON.parse(button.dataset.gameData);

        const downloadFile = gamePlatforms[currentPlatform].downloadFile;
        console.debug("downloadFile", downloadFile);

        const romInstallToGameDir = gamePlatforms[currentPlatform].romInstallToGameDir;
        console.debug("romInstallToGameDir", romInstallToGameDir);
        const romInstallToHomeDir = gamePlatforms[currentPlatform].romInstallToHomeDir;
        console.debug("romInstallToHomeDir", romInstallToHomeDir);
        const gameExecutable = gamePlatforms[currentPlatform].gameExecutable;
        console.debug("gameExecutable", gameExecutable);
        const romInstallPath = gamePlatforms[currentPlatform].romInstallPath;
        console.debug("romInstallPath", romInstallPath);
        const romInstallDir = gamePlatforms[currentPlatform].romInstallDir;
        console.debug("romInstallDir", romInstallDir);

        const usesDmg = gamePlatforms[currentPlatform].usesDMG;
        console.debug("usesDmg", usesDmg);

        const dataDownloadPath = gameData.downloadPath;
        console.debug("dataDownloadPath", dataDownloadPath);
        const dataDownloadFile = gameData.downloadFile;
        console.debug("dataDownloadFile", dataDownloadFile);
        
        if(button != null) {
            button.addEventListener("click", async () => {
                if (currentSettings && installPath) {
                    globalThis.presto.functions.showDownloadBar(true);
                    const zipPath = `${installPath}/${gamePathTitle}.zip`;
                    const finalPath = `${installPath}/${gamePathTitle}`;
                    const tempPath = `${installPath}/temp`;
                    
                    await globalThis.presto.functions.downloadFile(downloadFile, zipPath)
                    .then(async () => {
                        // Extract based on platform                        
                        let result = await globalThis.presto.functions.genericInvoke('unzip_file', { 
                            zipPath: zipPath,
                            tempPath: tempPath,
                            finalPath: finalPath,
                            usesDmg: usesDmg,
                            gameExecutable: gameExecutable,
                        });
                        globalThis.presto.functions.updateProgress('Installing', 100);

                        console.debug("result", result);
                    })
                    .catch((error) => {
                        console.error("Failed to extract file:", error);
                        throw error; // Re-throw to trigger the finally block
                    })
                    .then(async () => {
                        console.debug("download path", `${dataDownloadPath}${dataDownloadFile}`);
                        
                        // There's some configuration you can do per game
                        // Sometimes you need to put the rom in the game dir
                        // Sometimes you need to put the rom in the home dir
                        // Sometimes it needs to go somewhere else...

                        let destPath;
                        if(romInstallToGameDir) {
                            destPath = `${finalPath}/${dataDownloadFile}`;
                        } else {
                            if(romInstallToHomeDir) {
                                destPath = `${homeDirPath}${romInstallPath}${romInstallDir}/${dataDownloadFile}`;
                            } else {
                                destPath = `${romInstallPath}${romInstallDir}/${dataDownloadFile}`;
                            }
                        }
                        console.debug("dest path", destPath);
                        
                        // Create destination directory before downloading
                        await globalThis.presto.functions.genericInvoke('create_directory', {
                            path: destPath.substring(0, destPath.lastIndexOf('/'))
                        });
                        
                        // Download the data file to the destination path
                        await globalThis.presto.functions.downloadFile(`${dataDownloadPath}${dataDownloadFile}`,destPath);
                    })
                    .catch((error) => {
                        console.error("Failed to download data file:", error);
                        throw error;
                    })
                    .then(async () => {
                        // If we got here, all previous operations were successful
                        await globalThis.presto.functions.setInstalled(gamePathTitle, gameVersion);
                        window.location.reload(true);
                    })
                    .catch((error) => {
                        console.error("Installation failed:", error);
                        throw error;
                    })
                    .finally(async () => {
                        // either way we're done, so clean up
                        try {
                            await globalThis.presto.functions.genericInvoke('cleanup_folder', { 
                                folder: `${tempPath}`
                            });
                            await globalThis.presto.functions.genericInvoke('cleanup_file', { 
                                file: `${zipPath}`
                            });
                        } catch (error) {
                            console.error("Cleanup failed:", error);
                        } finally {
                            globalThis.presto.functions.showDownloadBar(false);
                        }
                    });
                }
            });
        }
    }
</script>
<button 
    inert 
    class={buttonClasses} 
    data-game-path-title={gamePathTitle} 
    data-game-version={version}
    data-game-platforms={JSON.stringify(gamePlatforms)}
    data-game-data={JSON.stringify(gameData)}
>
Install
</button>